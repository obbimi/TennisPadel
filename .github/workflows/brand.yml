name: Build & Publish Release APK

on:
  workflow_dispatch: # run manually
  push:
    tags:
      - 'Release*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Setup Java JDK
      uses:
        actions/setup-java@v4.2.1
      with:
        java-version: 11
        distribution: 'adopt'

    - name: Checkout the code
      uses: actions/checkout@v4.1.7
      with:
        repository: obbimi/Squore # overwrite the default ${{ github.repository }}
        #ref: main

    - name: Make pipeline script files executable where needed
      run: chmod +x ./gradlew ./build.gradle.adapt.for.github.workflow.sh ./change.R.package.sh

    - name: Adapt build.gradle and google-services.json by means of script
      env:
        GSM_API_KEY: ${{ secrets.GSM_API_KEY }}
      run: ./build.gradle.adapt.for.github.workflow.sh ${GSM_API_KEY}

    - name: adapt sources and res files to build different brand
      run: | 
        set -x
        brand=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
        ./change.R.package.sh ${brand}

    - name: Extract the version from build.gradle
      id: extract_version
      run: |
        set -x
        VERSION=$(grep '^\s*versionCode' build.gradle | cut -d '+' -f 2 | sort -u | tr -d ' ')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build unsigned release .apk files
      run: ./gradlew build

    - name: Sign .apk files
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      run: |
        set -x
        brand=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
        echo "${KEYSTORE_BASE64}" | base64 -d > apksign.keystore
        androidhome="${ANDROID_HOME:-${ANDROID_SDK}}"
        for unsignedFn in build/outputs/apk/*/release/*.apk; do
          unbrandedSignedFn=${unsignedFn/release-unsigned/release-signed}
          signedFn=${unbrandedSignedFn/${brand}/${brand}.${{ steps.extract_version.outputs.version }}}
          ${androidhome}/build-tools/$(ls ${androidhome}/build-tools/ | tail -1)/apksigner sign --ks apksign.keystore --ks-pass pass:"${KEYSTORE_PASSWORD}" --out "${signedFn}" "${unsignedFn}"
          cp -v ${signedFn} . # for 'Publish' step to not have to specify full paths 
        done
        rm -v apksign.keystore
        echo $PWD
        ls -l *.apk # verify 


    - name: Create and upload .apk to /releases (softprops)
      uses: softprops/action-gh-release@v2
      with:
        draft: true # Sets the release as a draft instead of publishing it, allowing you to make any edits needed before releasing
        token: ${{ secrets.GH_ACCESS_TOKEN }}
        tag_name: "Release.${{ steps.extract_version.outputs.version }}"
        files: ./build/outputs/apk/*/release/*-*-release-signed.apk
        generate_release_notes: false

    - name: Publish to google play store
      uses: r0adkll/upload-google-play@v1
      with:
        serviceAccountJsonPlainText: ${{ secrets.SERVICE_ACCOUNT_JSON }}
        packageName: com.doubleyellow.tennispadel
        releaseFiles: ./TennisPadel.${{ steps.extract_version.outputs.version }}-phoneTabletPost23-release-signed.apk, ./TennisPadel.${{ steps.extract_version.outputs.version }}-phoneTabletPre22-release-signed.apk
        track: alpha # alpha,beta,internal or production
        #status: inProgress #Error: Status 'inProgress' requires a 'userFraction' to be set
        inAppUpdatePriority: 2
        #userFraction: 0.10 # not possible in alpha
        #whatsNewDirectory: distribution/whatsnew
        #mappingFile: app/build/outputs/mapping/release/mapping.txt
        #debugSymbols: app/intermediates/merged_native_libs/release/out/lib
        # "Error: The first release on a track cannot be staged"
